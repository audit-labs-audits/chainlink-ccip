{
  "title": "An Overview of EVM Layers in `core/chains/evm`",
  "id": "Tk8f2poReEigrUX6iO8cz+SxDh7Q+sxITfLCJ8mWXeM=",
  "originalId": 3052,
  "position": 2,
  "steps": [
    {
      "type": "textOnly",
      "description": "`core/chains/evm` is built as five cooperating layers:\n- `value & type helpers`\n- a multi-node `RPC client`\n- per-chain configuration\n- dynamic gas & fee estimators\n- a transaction manager that stores, signs and re-broadcasts transactions.\nThe next steps walk through each layer.",
      "title": "",
      "id": "36493"
    },
    {
      "type": "highlight",
      "description": "`Wei` wraps `big.Int`, adding unit-aware formatting, Min/Max helpers and SQL integration.  All higher layers pass `*assets.Wei` instead of raw `*big.Int`, enforcing consistent maths and persistence.",
      "file": "core/chains/evm/assets/wei.go",
      "highlight": [
        {
          "start": 60,
          "end": 78
        }
      ],
      "title": "",
      "id": "36494"
    },
    {
      "type": "highlight",
      "description": "Receipts and Logs are re-implemented locally. Removing `geth`’s `gencodec` **required** tags lets `Chainlink` unmarshall empty JSON objects and add conveniences like `IsZero` / `IsUnmined`.",
      "file": "core/chains/evm/types/types.go",
      "highlight": [
        {
          "start": 54,
          "end": 67
        }
      ],
      "title": "",
      "id": "36495"
    },
    {
      "type": "highlight",
      "description": "Client exposes a rich surface: standard `geth` calls plus helpers (`LINKBalance`, `HeadByNumber/Hash`, `FeeHistory`, `simulation`…). Each call is routed through a generic **MultiNode load-balancer**, shielding users from node failure.",
      "file": "core/chains/evm/client/chain_client.go",
      "highlight": [
        {
          "start": 25,
          "end": 45
        }
      ],
      "title": "",
      "id": "36496"
    },
    {
      "type": "highlight",
      "description": "`evm_client.go` is the factory.  **TOML** nodes become primary or send-only **RPC** clients, timeouts are tuned per chain type, then a `chainClient` implementing the **interface** above is returned.",
      "file": "core/chains/evm/client/evm_client.go",
      "highlight": [
        {
          "start": 17,
          "end": 38
        }
      ],
      "title": "",
      "id": "36497"
    },
    {
      "type": "highlight",
      "description": "`EVMConfig` is a slim facade around parsed TOML.  Sub-systems receive only what they need (`GasEstimator()`, `NodePool()`, `OCR()`…) keeping packages decoupled from the full config struct.",
      "file": "core/chains/evm/config/chain_scoped.go",
      "highlight": [
        {
          "start": 70,
          "end": 90
        }
      ],
      "title": "",
      "id": "36498"
    },
    {
      "type": "highlight",
      "description": "`FeeHistoryEstimator` ticks every `CacheTimeout`; depending on EIP-1559 it calls `eth_gasPrice` or `eth_feeHistory`, caches the result and exposes `GetLegacyGas` / `GetDynamicFee` to callers.",
      "file": "core/chains/evm/gas/fee_history_estimator.go",
      "highlight": [
        {
          "start": 140,
          "end": 162
        }
      ],
      "title": "",
      "id": "36499"
    },
    {
      "type": "highlight",
      "description": "`BlockHistoryEstimator` raises fees when a `TX` waits too long.  `haltBumping` blocks bumps if an existing attempt already exceeds the 85-percentile of recent blocks, flagging connectivity issues instead of wasting gas.",
      "file": "core/chains/evm/gas/block_history_estimator.go",
      "highlight": [
        {
          "start": 305,
          "end": 320
        }
      ],
      "title": "",
      "id": "36500"
    },
    {
      "type": "highlight",
      "description": "`HeadTracker` is a thin adapter around the common tracker, parameterised with `evmtypes.Head`. It subscribes through the `Client` and broadcasts new heads to listeners like the `gas estimator` or `log poller`.",
      "file": "core/chains/evm/headtracker/head_tracker.go",
      "highlight": [
        {
          "start": 18,
          "end": 36
        }
      ],
      "title": "",
      "id": "36501"
    },
    {
      "type": "highlight",
      "description": "`TxAttemptBuilder` builds signed transactions. `NewTxAttempt` picks `0x0` or `0x2` depending on chain settings, asks the estimator, signs via `keystore` and returns an **RLP-encoded** blob ready for broadcast.",
      "file": "core/chains/evm/txmgr/attempts.go",
      "highlight": [
        {
          "start": 112,
          "end": 135
        }
      ],
      "title": "",
      "id": "36502"
    },
    {
      "type": "highlight",
      "description": "The store copes with edge cases: if no receipt appears before finality `MarkAllConfirmedMissingReceipt` moves the `TX` to `confirmed_missing_receipt` so bumping stops and operators get a critical log.",
      "file": "core/chains/evm/txmgr/evm_tx_store.go",
      "highlight": [
        {
          "start": 1004,
          "end": 1023
        }
      ],
      "title": "",
      "id": "36503"
    },
    {
      "type": "textOnly",
      "description": "**Putting it together:**\n1 `Config` → factory builds `Client`, `estimators`, `head tracker`.\n2 `HeadTracker` streams heads; `estimators` refresh prices; `MultiNode` routes `RPC`.\n3 `TxManager` signs, stores and rebroadcasts until receipts are saved.\n4 `Store` finalises or escalates based on receipt status.\nThanks to this layering a new chain only needs its own `estimator` & `config` while re-using `client`, tracking and persistence.",
      "title": "",
      "id": "36504"
    }
  ]
}