{
  "title": "10.10: MultiOCR3Base Essentials for OffRamp Readers",
  "id": "wV53YO8UaHOyx4czULhFlqfGSgFsIA3Uz596mfkifpw=",
  "originalId": 3142,
  "position": 62,
  "steps": [
    {
      "type": "textOnly",
      "description": "We will follow the life-cycle of an OCR report as it moves through configuration, validation and transmission. First we look at the generic `MultiOCR3Base` storage and events, then see how `OffRamp` tightens the rules for its **Commit and Execution plugins**, and finally step through the safeguards inside `_transmit` so you can read every call the `OffRamp` makes.",
      "title": "",
      "id": "37571"
    },
    {
      "type": "highlight",
      "description": "ConfigInfo is the hot-path cache.  Besides the current digest and F-value it carries the `isSignatureVerificationEnabled` flag that switches signature checking on or off per plugin configuration.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 48,
          "end": 55
        }
      ],
      "title": "",
      "id": "37572"
    },
    {
      "type": "highlight",
      "description": "OCRConfig wraps ConfigInfo with the dynamic signer and transmitter lists.  Each plugin type therefore has its own DON membership and verification policy.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 75,
          "end": 81
        }
      ],
      "title": "",
      "id": "37573"
    },
    {
      "type": "highlight",
      "description": "ConfigSet tells the world which digest is now active (with signer/transmitter sets), while every accepted report later triggers Transmitted carrying the same digest plus its sequence number – together the two events let observers stitch an exact chronology.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 18,
          "end": 25
        }
      ],
      "title": "",
      "id": "37574"
    },
    {
      "type": "highlight",
      "description": "setOCR3Configs is owner-only and simply loops over the supplied array, delegating each element to the internal validator.  This means every rule we are about to see applies identically whether a single or many plugin configs are updated.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 124,
          "end": 137
        }
      ],
      "title": "",
      "id": "37575"
    },
    {
      "type": "highlight",
      "description": "Within _setOCR3Config the signature-verification flag is immutable: once a plugin has been configured, any future attempt to flip the flag reverts (lines 152-156).  That constancy is crucial because downstream code relies on it when deciding whether to expect signatures.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 142,
          "end": 158
        }
      ],
      "title": "",
      "id": "37576"
    },
    {
      "type": "highlight",
      "description": "After roles and limits are stored the contract emits ConfigSet and calls the virtual hook `_afterOCR3ConfigSet`, giving derived contracts such as OffRamp a moment to react.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 185,
          "end": 192
        }
      ],
      "title": "",
      "id": "37577"
    },
    {
      "type": "highlight",
      "description": "\n\nOffRamp’s override hardens policy:\n- Commit plugin (id 0) must keep verification **ON**; if it is reconfigured, the `s_latestPriceSequenceNumber` is reset so old prices cannot leak into the new regime.\n- Execution plugin (id 1) must keep verification **OFF**; any contradiction reverts immediately.\n",
      "file": "chains/evm/contracts/offRamp/OffRamp.sol",
      "highlight": [
        {
          "start": 930,
          "end": 949
        }
      ],
      "title": "",
      "id": "37578"
    },
    {
      "type": "highlight",
      "description": "The plugin IDs used everywhere: 0 = Commit, 1 = Execution.",
      "file": "chains/evm/contracts/libraries/Internal.sol",
      "highlight": [
        {
          "start": 208,
          "end": 213
        }
      ],
      "title": "",
      "id": "37579"
    },
    {
      "type": "highlight",
      "description": "_transmit is the single entry point for all reports.  The same function is used for Commit and Execution; its behaviour later branches based on the flag contained in ConfigInfo.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 231,
          "end": 240
        }
      ],
      "title": "",
      "id": "37580"
    },
    {
      "type": "highlight",
      "description": "First safeguard: the exact calldata length is recomputed.  When signatures are expected the constant-length formula includes rs/ss arrays; when they are not, the shorter formula is enforced.  A mismatch means the report was malformed and it is rejected before any heavy work.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 248,
          "end": 259
        }
      ],
      "title": "",
      "id": "37581"
    },
    {
      "type": "highlight",
      "description": "\n\nSecond & third safeguards:\n- The digest embedded in the report must match the current config (protects against replay from older configs).\n- The cached deployment `chainId` must equal `block.chainid` (protects against accepting reports on an unexpected fork).\n",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 261,
          "end": 268
        }
      ],
      "title": "",
      "id": "37582"
    },
    {
      "type": "highlight",
      "description": "Fourth safeguard: the transmitter check.  Only addresses registered for the current plugin can deliver a report; everyone else hits UnauthorizedTransmitter.  The special GAS_ESTIMATION_SENDER is exempt so off-chain gas simulation tools can call the function safely.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 270,
          "end": 283
        }
      ],
      "title": "",
      "id": "37583"
    },
    {
      "type": "highlight",
      "description": "Finally, if verification is ON, exactly F+1 signatures are required and individually verified for uniqueness and registration.  When the flag is OFF this expensive block is skipped, which is why the earlier immutability rule matters.",
      "file": "chains/evm/contracts/ocr/MultiOCR3Base.sol",
      "highlight": [
        {
          "start": 285,
          "end": 296
        }
      ],
      "title": "",
      "id": "37584"
    },
    {
      "type": "highlight",
      "description": "Execution reports: OffRamp processes the messages, then calls `_transmit` with empty signature arrays under plugin 1.  Thanks to the policy enforced at config time the lack of signatures is accepted.",
      "file": "chains/evm/contracts/offRamp/OffRamp.sol",
      "highlight": [
        {
          "start": 333,
          "end": 341
        }
      ],
      "title": "",
      "id": "37585"
    },
    {
      "type": "highlight",
      "description": "Commit reports: after price updates and root commits, OffRamp forwards the blob together with rs/ss/rawVs under plugin 0.  Verification is mandatory here and enforced by the same _transmit pathway we dissected.",
      "file": "chains/evm/contracts/offRamp/OffRamp.sol",
      "highlight": [
        {
          "start": 852,
          "end": 857
        }
      ],
      "title": "",
      "id": "37586"
    },
    {
      "type": "textOnly",
      "description": "Putting it all together: `ConfigSet` announces a new digest; `OffRamp`’s hook ensures the signature policy is correct for each plugin. When a report later arrives `_transmit` checks message shape, digest, chain-fork status, authorised transmitter and – if required – the signatures before emitting **Transmitted**. Knowing these checkpoints lets you confidently interpret every commit or execute call you meet in `OffRamp`.",
      "title": "",
      "id": "37587"
    }
  ]
}