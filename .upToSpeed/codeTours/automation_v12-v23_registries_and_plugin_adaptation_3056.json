{
  "title": "Automation: v1.2-v2.3 Registries & Plugin Adaptation",
  "id": "SofbEjupH9L6M/gGnIv4Ybt/NrrzEDpIwvs7jZ2fPQ0=",
  "originalId": 3056,
  "position": 4,
  "steps": [
    {
      "type": "textOnly",
      "description": "Follow three **registry contracts** – 1.2, 2.1 and 2.3 – and watch **gas-efficiency**, **permissioning** and **meta-transaction forwarding** appear step-by-step.",
      "title": "",
      "id": "36530"
    },
    {
      "type": "highlight",
      "description": "**v1.2** keeps every upkeep in one plain `struct`. Three full storage words, no `packing`, no `forwarder` – cheap to write, expensive to read.",
      "file": "contracts/src/v0.8/automation/v1_2/KeeperRegistry1_2.sol",
      "highlight": [
        {
          "start": 19,
          "end": 27
        }
      ],
      "title": "",
      "id": "36531"
    },
    {
      "type": "highlight",
      "description": "Config and state live together in `Storage`. Several `uint24` / `uint32` fields leave slack bytes that later versions reclaim for gas.",
      "file": "contracts/src/v0.8/automation/v1_2/KeeperRegistry1_2.sol",
      "highlight": [
        {
          "start": 128,
          "end": 138
        }
      ],
      "title": "",
      "id": "36532"
    },
    {
      "type": "highlight",
      "description": "`checkUpkeep()` is an `eth_call`: it executes the target’s check, simulates `perform` and returns `performData` plus four raw numbers keepers embed in their `tx`.",
      "file": "contracts/src/v0.8/automation/v1_2/KeeperRegistry1_2.sol",
      "highlight": [
        {
          "start": 221,
          "end": 244
        }
      ],
      "title": "",
      "id": "36533"
    },
    {
      "type": "highlight",
      "description": "`performUpkeep()` talks to the target directly – no batching, no log triggers, LINK-only billing, keepers race each other.",
      "file": "contracts/src/v0.8/automation/v1_2/KeeperRegistry1_2.sol",
      "highlight": [
        {
          "start": 258,
          "end": 264
        }
      ],
      "title": "",
      "id": "36534"
    },
    {
      "type": "textOnly",
      "description": "`v2.1` flips the design: `OCR nodes` agree off-chain, a single transmitter posts one batched report, and each upkeep is called through an `AutomationForwarder`.",
      "title": "",
      "id": "36535"
    },
    {
      "type": "highlight",
      "description": "`transmit()` becomes the only hot path.  It verifies f+1 signatures then loops over upkeeps in a single transaction.",
      "file": "contracts/src/v0.8/automation/v2_1/KeeperRegistry2_1.sol",
      "highlight": [
        {
          "start": 67,
          "end": 80
        }
      ],
      "title": "",
      "id": "36536"
    },
    {
      "type": "highlight",
      "description": "Upkeep is repacked: `booleans` compress, `performGas` shrinks to `uint32`, `forwarder` is stored, `balance` & `spent` share a word – one `SLOAD` per upkeep inside `transmit`.",
      "file": "contracts/src/v0.8/automation/v2_1/KeeperRegistryBase2_1.sol",
      "highlight": [
        {
          "start": 198,
          "end": 208
        }
      ],
      "title": "",
      "id": "36537"
    },
    {
      "type": "highlight",
      "description": "**HotVars** gathers fields transmit touches—`f`, `premiums`, `gas ceiling`, `pause flag`—into one tightly-packed word to shave gas.",
      "file": "contracts/src/v0.8/automation/v2_1/KeeperRegistryBase2_1.sol",
      "highlight": [
        {
          "start": 214,
          "end": 223
        }
      ],
      "title": "",
      "id": "36538"
    },
    {
      "type": "highlight",
      "description": "`_performUpkeep` delegates through a per-upkeep forwarder – the registry never calls user contracts directly again.",
      "file": "contracts/src/v0.8/automation/v2_1/KeeperRegistryBase2_1.sol",
      "highlight": [
        {
          "start": 761,
          "end": 768
        }
      ],
      "title": "",
      "id": "36539"
    },
    {
      "type": "highlight",
      "description": "The forwarder enforces `exact-gas calls` and records `gasUsed`; because it stores the `registry pointer`, `migrations` keep user permissions intact.",
      "file": "contracts/src/v0.8/automation/AutomationForwarder.sol",
      "highlight": [
        {
          "start": 35,
          "end": 59
        }
      ],
      "title": "",
      "id": "36540"
    },
    {
      "type": "textOnly",
      "description": "`v2.3` keeps the **OCR** flow but adds **multi-token billing**, **chain modules** and more **gas tuning** – while staying backward-compatible with `2.1` upkeeps.",
      "title": "",
      "id": "36541"
    },
    {
      "type": "highlight",
      "description": "Root contract now advertises `AutomationRegistry` **2.3.0** and splits logic into `A`/`B`/`C` libraries. Fees are `USD`-denominated, `LINK` is optional.",
      "file": "contracts/src/v0.8/automation/v2_3/AutomationRegistry2_3.sol",
      "highlight": [
        {
          "start": 23,
          "end": 36
        }
      ],
      "title": "",
      "id": "36542"
    },
    {
      "type": "highlight",
      "description": "Upkeep gains `billingToken` and `overridesEnabled`, amountSpent stretches to `uint128`, yet the **two-word hot layout** is preserved.",
      "file": "contracts/src/v0.8/automation/v2_3/AutomationRegistryBase2_3.sol",
      "highlight": [
        {
          "start": 253,
          "end": 266
        }
      ],
      "title": "",
      "id": "36543"
    },
    {
      "type": "highlight",
      "description": "`BillingConfig` per token: `gasFeePPB` + `flatFeeMilliCents`. Any `ERC-20` with an `8-dec` price feed can fund upkeeps; `LINK` rules still pay `NOPs`.",
      "file": "contracts/src/v0.8/automation/v2_3/AutomationRegistryBase2_3.sol",
      "highlight": [
        {
          "start": 380,
          "end": 391
        }
      ],
      "title": "",
      "id": "36544"
    },
    {
      "type": "highlight",
      "description": "`_handlePayment()` converts `gas` + `premium` into the chosen token, tracks `LINK` equivalents for node rewards and updates per-token reserves.",
      "file": "contracts/src/v0.8/automation/v2_3/AutomationRegistryBase2_3.sol",
      "highlight": [
        {
          "start": 1007,
          "end": 1026
        }
      ],
      "title": "",
      "id": "36545"
    },
    {
      "type": "textOnly",
      "description": "The `Go OCR2-Keeper plugin` adapts with two encoders so one network can serve every registry.",
      "title": "",
      "id": "36546"
    },
    {
      "type": "highlight",
      "description": "`v20 encoder` (`registries` ≤2.0) builds {`fastGasWei`, `linkNative`, `upkeepIds`, `wrappedPerformDatas`}.  No trigger details.",
      "file": "core/services/ocr2/plugins/ocr2keeper/evmregistry/v20/encoder.go",
      "highlight": [
        {
          "start": 57,
          "end": 70
        }
      ],
      "title": "",
      "id": "36547"
    },
    {
      "type": "highlight",
      "description": "`v21 encoder` (`registries 2.1+`) packs each trigger into bytes, attaches per-upkeep gas limits and keeps a single `FastGas`/`LinkNative` price pair.",
      "file": "core/services/ocr2/plugins/ocr2keeper/evmregistry/v21/encoding/encoder.go",
      "highlight": [
        {
          "start": 31,
          "end": 45
        }
      ],
      "title": "",
      "id": "36548"
    },
    {
      "type": "textOnly",
      "description": "`1.2` was **direct-call** & **LINK-only**; `2.1` introduced **OCR batching**, **forwarders** and **tight storage**; `2.3` added **multi-token billing** and **chain modules**.  `Encoder v20` and `v21` let **off-chain software** stay compatible with every live registry.",
      "title": "",
      "id": "36549"
    }
  ]
}